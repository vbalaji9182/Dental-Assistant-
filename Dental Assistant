# main.py (FastAPI backend with SNOMED CT and FHIR integration + expanded country-specific codes)

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List
import requests

app = FastAPI()

class PatientInfo(BaseModel):
    age: int
    gender: str
    chief_complaint: str
    country: str
    findings: List[str]

# Country-specific procedure codes (expanded mapping)
PROCEDURE_CODES = {
    "india": {
        "Root Canal Treatment": "DCI-101",
        "Filling": "DCI-102",
        "Crown or Extraction": "DCI-103"
    },
    "us": {
        "Root Canal Treatment": "ADA-D3310",
        "Filling": "ADA-D2330",
        "Crown or Extraction": "ADA-D2750"
    },
    "uk": {
        "Root Canal Treatment": "NHS-7101",
        "Filling": "NHS-7201",
        "Crown or Extraction": "NHS-7301"
    },
    "australia": {
        "Root Canal Treatment": "ADA-Aus-415",
        "Filling": "ADA-Aus-525",
        "Crown or Extraction": "ADA-Aus-635"
    },
    "canada": {
        "Root Canal Treatment": "CDA-331",
        "Filling": "CDA-233",
        "Crown or Extraction": "CDA-275"
    }
}

# SNOMED CT search (uses Snowstorm - open SNOMED browser)
def search_snomed(term: str):
    url = f"https://snowstorm.snomed.io/MAIN/concepts?term={term}&activeFilter=true&limit=1"
    try:
        response = requests.get(url)
        response.raise_for_status()
        results = response.json()
        if results['items']:
            return results['items'][0]['pt']['term'], results['items'][0]['conceptId']
        else:
            return term, "Unknown"
    except Exception as e:
        return term, "Error"

# Simple rule-based treatment recommender with SNOMED and country-specific codes
def recommend_treatment(data: PatientInfo):
    treatment_plan = []
    snomed_codes = []
    code_map = PROCEDURE_CODES.get(data.country.lower(), {})

    for finding in data.findings:
        term, code = search_snomed(finding)
        snomed_codes.append({"term": term, "code": code})

        if "caries" in term.lower():
            treatment = "Root Canal Treatment" if "deep" in finding.lower() else "Filling"
            treatment_plan.append({
                "procedure": treatment,
                "country_code": code_map.get(treatment, "N/A")
            })
        elif "fracture" in term.lower():
            treatment = "Crown or Extraction"
            treatment_plan.append({
                "procedure": treatment,
                "country_code": code_map.get(treatment, "N/A")
            })

    # Country-specific guidance note
    guidance_notes = {
        "india": "Follow DCI protocols",
        "us": "ADA coding and insurance mapping",
        "uk": "NHS Band system applies",
        "australia": "Use ADA schedule of dental services",
        "canada": "Refer to CDA Fee Guide"
    }

    guidance = guidance_notes.get(data.country.lower())
    if guidance:
        treatment_plan.append({"note": guidance})

    return treatment_plan, snomed_codes

@app.post("/recommend")
def get_recommendation(patient: PatientInfo):
    plan, codes = recommend_treatment(patient)
    return {
        "treatment_plan": plan,
        "snomed_terms": codes
    }
